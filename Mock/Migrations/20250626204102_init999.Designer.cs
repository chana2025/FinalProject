// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mock;

#nullable disable

namespace Mock.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20250626204102_init999")]
    partial class init999
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repository.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DietId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<byte[]>("ImagePath")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DietId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Repository.Entities.CustomerFoodPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("CustomerFoodPreferences");
                });

            modelBuilder.Entity("Repository.Entities.DietType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Calories")
                        .HasColumnType("float");

                    b.Property<double?>("Carbohydrates")
                        .HasColumnType("float");

                    b.Property<string>("DietName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Fat")
                        .HasColumnType("float");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Protein")
                        .HasColumnType("float");

                    b.Property<string>("SpecialComments")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DietTypes");
                });

            modelBuilder.Entity("Repository.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<double?>("Calories")
                        .HasColumnType("float");

                    b.Property<double?>("Carbohydrates")
                        .HasColumnType("float");

                    b.Property<double?>("Fat")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Protein")
                        .HasColumnType("float");

                    b.Property<string>("SourceApi")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Repository.Entities.ProductForDietType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DietTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ProdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("dietTypeCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("dietTypeCode");

                    b.ToTable("ProductForDietTypes");
                });

            modelBuilder.Entity("Repository.Entities.WeeklyTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPassCalories")
                        .HasColumnType("bit");

                    b.Property<double>("UpdatdedWieght")
                        .HasColumnType("float");

                    b.Property<DateTime>("WeekDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustId");

                    b.ToTable("WeeklyTrackings");
                });

            modelBuilder.Entity("Repository.Entities.Customer", b =>
                {
                    b.HasOne("Repository.Entities.DietType", "DietType")
                        .WithMany("Customers")
                        .HasForeignKey("DietId");

                    b.Navigation("DietType");
                });

            modelBuilder.Entity("Repository.Entities.CustomerFoodPreference", b =>
                {
                    b.HasOne("Repository.Entities.Customer", "Customer")
                        .WithMany("FoodPreferences")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Product", "Product")
                        .WithOne("CustomerFoodPreferences")
                        .HasForeignKey("Repository.Entities.CustomerFoodPreference", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Repository.Entities.ProductForDietType", b =>
                {
                    b.HasOne("Repository.Entities.DietType", "DietTypeCode")
                        .WithMany()
                        .HasForeignKey("dietTypeCode");

                    b.Navigation("DietTypeCode");
                });

            modelBuilder.Entity("Repository.Entities.WeeklyTracking", b =>
                {
                    b.HasOne("Repository.Entities.Customer", "Customer")
                        .WithMany("WeeklyTrackings")
                        .HasForeignKey("CustId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Repository.Entities.Customer", b =>
                {
                    b.Navigation("FoodPreferences");

                    b.Navigation("WeeklyTrackings");
                });

            modelBuilder.Entity("Repository.Entities.DietType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Repository.Entities.Product", b =>
                {
                    b.Navigation("CustomerFoodPreferences")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
